name: Secure CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  security-events: write

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      # SETUP AND BASIC TESTING
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Required for better security scanning

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'
          cache-dependency-path: package-lock.json
          
      - name: Install dependencies
        run: |
          npm install
      
      # Create basic ESLint config if it doesn't exist
      - name: Setup ESLint config
        run: |
          if [ ! -f .eslintrc.js ] && [ ! -f .eslintrc.json ] && [ ! -f .eslintrc.yml ]; then
            echo "Creating basic ESLint config..."
            echo "module.exports = {
              env: {
                node: true,
                es6: true,
                jest: true
              },
              extends: 'eslint:recommended',
              parserOptions: {
                ecmaVersion: 2018
              }
            };" > .eslintrc.js
          fi
      
      - name: Run linting
        run: |
          npm run lint
        continue-on-error: true

      - name: Run tests with coverage
        run: |
          npm test -- --forceExit --coverage ./app.test.js --coverageReporters=lcov --coverageReporters=text
        continue-on-error: true
        
      # STATIC CODE ANALYSIS
      # GitHub's built-in security scanning (better than SonarCloud for this case)
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        continue-on-error: true

      # DEPENDENCY VULNERABILITY SCANNING
      # 1. npm audit for quick checks
      - name: Run npm audit
        run: npm audit --json > npm-audit.json || true
      
      - name: Archive npm audit results
        uses: actions/upload-artifact@v4
        with:
          name: npm-audit-results
          path: npm-audit.json
          retention-days: 5

      # 2. OWASP Dependency-Check for comprehensive analysis
      - name: OWASP Dependency-Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'secure-cicd-demo'
          path: '.'
          format: 'HTML'
          out: 'report'
          args: >
            --enableExperimental
            --failOnCVSS 7
            --suppression suppression.xml
    
      - name: Archive dependency check results
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: report
          retention-days: 5

      # CONTAINER BUILDING AND SCANNING
      - name: Build Docker image
        run: |
          docker build -t secure-cicd-app:${{ github.sha }} .
      
      # Advanced container vulnerability scanning 
      - name: Trivy Container Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: secure-cicd-app:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Verify SARIF file
        run: |
          echo "Contents of SARIF file:"
          cat trivy-results.sarif
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Archive SARIF file (fallback)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-results-sarif
          path: trivy-results.sarif
          retention-days: 5
      
      # DYNAMIC APPLICATION SECURITY TESTING (DAST)
      # Start application for OWASP ZAP scanning
      - name: Start application for DAST
        run: |
          docker run -d -p 3000:3000 --name app-container secure-cicd-app:${{ github.sha }}
          echo "Waiting for application to start..."
          sleep 15
          curl -s http://localhost:3000/ || echo "Warning: Application may not be responding"
      
      # Run ZAP scan against the running application
      - name: OWASP ZAP Scan
        uses: zaproxy/action-baseline@v0.14.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: 'zap-rules.tsv'
          docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
          cmd_options: '-a'
        continue-on-error: false  # Don't fail the build initially
      
      # Clean up container
      - name: Stop application container
        if: always()  # Make sure to run even if ZAP scan fails
        run: docker stop app-container || true
      
      # RESULTS AND REPORTING
      # Archive all security scan results
      - name: Archive all security results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: |
            zap-baseline-report.html
            zap-baseline-report.json
            trivy-results.sarif
            npm-audit.json
            report/**
          retention-days: 5

      # Generate security summary
      - name: Generate security summary
        if: always()
        run: |
          echo "# Security Scan Summary" > security-summary.md
          echo "## Scan Date: $(date)" >> security-summary.md
          echo "## Repository: ${{ github.repository }}" >> security-summary.md
          echo "## Commit: ${{ github.sha }}" >> security-summary.md
          echo "" >> security-summary.md
          
          echo "### Security Scans Performed:" >> security-summary.md
          echo "- Static Analysis (CodeQL)" >> security-summary.md
          echo "- Dependency Analysis (npm audit, OWASP Dependency Check)" >> security-summary.md
          echo "- Container Security (Trivy)" >> security-summary.md
          echo "- Dynamic Application Security Testing (OWASP ZAP)" >> security-summary.md
          
          echo "" >> security-summary.md
          echo "Detailed reports are available in the workflow artifacts." >> security-summary.md
      
      - name: Upload security summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md
          retention-days: 5